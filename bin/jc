#!/usr/bin/env python

import sys
import os
from os import path
import re
import subprocess
import getopt


def get_project_root(dir):
    if 'pom.xml' in os.listdir(dir):
        return (path.abspath(dir))
    else:
        pardir = path.join(dir, os.pardir)
        if path.abspath(dir) == path.abspath(pardir):
            raise Exception('pom.xml not found.')
        return get_project_root(pardir)


def get_classpath(project_root_path):
    _JCRC_PATH = path.join(project_root_path, '.jc_cache')
    _POM_PATH = path.join(project_root_path, 'pom.xml')

    def _run_mvn():
        mvn_result = subprocess.Popen(
            ['mvn', '-f',
             path.join(project_root_path, 'pom.xml'),
             'dependency:build-classpath'],
            stdout=subprocess.PIPE).communicate()[0]

        m = re.search(
            r'Dependencies classpath:\n(.*)\n', mvn_result.decode('UTF-8'))

        build_classpath = \
            path.join(project_root_path, 'src', 'main', 'resources') + ':' + \
            path.join(project_root_path, 'target', 'classes') + ':' + \
            m.group(1)

        propf = open(path.join(project_root_path, '.jc_cache'), 'w')
        propf.write(build_classpath)
        propf.close()
        print('Created .jc_cache to cache classpath')

    if not path.exists(_JCRC_PATH):
        print('.jc_cache not found. run Maven...')
        _run_mvn()

    elif os.stat(_JCRC_PATH).st_mtime < os.stat(_POM_PATH).st_mtime:
        print('.jc_cache is outdated, run Maven...')
        _run_mvn()

    return open(_JCRC_PATH, 'r').read()


def compile(file_name):
    if not path.exists(file_name):
        print("No such file %s" % file_name)
        return

    file_path = path.abspath(file_name)

    PROJECT_ROOT_PATH = get_project_root(path.dirname(file_path))
    TARGET_CLASSES_DIR_PATH = path.join(
        PROJECT_ROOT_PATH,
        'target',
        'classes' if path.join('src', 'main') in file_path else 'test-classes')

    if not path.exists(TARGET_CLASSES_DIR_PATH):
        os.makedirs(TARGET_CLASSES_DIR_PATH)

    javac_proc = subprocess.Popen(['javac',
                                   '-cp', get_classpath(PROJECT_ROOT_PATH),
                                   '-d', TARGET_CLASSES_DIR_PATH,
                                   file_name],
                                  stdout=subprocess.PIPE)

    JAVAC_RESULT = javac_proc.communicate()[0]
    if not javac_proc.returncode == 0:
        print(JAVAC_RESULT)
        exit(javac_proc.returncode)


def compile_and_test(file_name):
    if not path.exists(file_name):
        print("No such file %s" % file_name)
        return

    compile(file_name)

    file_path = path.abspath(file_name)

    PROJECT_ROOT_PATH = get_project_root(path.dirname(file_path))
    JUNIT_RESULT = subprocess.Popen(
        ['java',
         '-cp',
         path.join(PROJECT_ROOT_PATH, 'target', 'test-classes') + ':' +
         get_classpath(PROJECT_ROOT_PATH),
         'org.junit.runner.JUnitCore',
         path.relpath(file_name,
                      path.join(PROJECT_ROOT_PATH, 'src', 'test', 'java'))
         .replace('/', '.').replace('.java', '')],
        stdout=subprocess.PIPE).communicate()[0]

    print(JUNIT_RESULT)


def print_usage():
    print("""\
    Usage: jc [options] <Java files...>

    options
    -t            compile and run JUnit
    """)


if __name__ == '__main__':
    optlist, args = getopt.getopt(sys.argv[1:], 't')
    if (len(args) < 1):
        print_usage()
        exit()

    allopts = set(opt[0] for opt in optlist)

    if '-t' in allopts:
        for file_name in args:
            compile_and_test(file_name)
    else:
        for file_name in args:
            compile(file_name)
